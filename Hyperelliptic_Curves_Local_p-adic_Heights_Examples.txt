"""Here we test several examples of computing the local height above p"""

p = 11
prec = 10
K = pAdicField(p, prec)
x = polygen(K)
C = HyperellipticCurve(x^6-24*x*(x-1))
P = C(0,0)
NP = C(0,0)
Q = C(1,1)
NQ = C(1,-1)
R = C(2,4)
NR = C(2,-4)

"""We now compute heights h_p(infty_- - infty_+, P-iota(P)), h_p(infty_- - infty_+, Q-iota(Q)), h_p(infty_- - infty_+, R-iota(R))"""

height_infinities(C, P, NP, prec)
height_infinities(C, Q, NQ, prec)
height_infinities(C, R, NR, prec)

Results:
0
2*11 + 5*11^2 + 9*11^3 + 9*11^4 + 9*11^5 + 11^6 + 6*11^7 + 10*11^8 + 10*11^9 + O(11^10)
7*11 + 8*11^2 + 7*11^3 + 10*11^4 + 10*11^5 + 10*11^6 + 11^7 + 3*11^9 + O(11^10)

"""Since we compute more heights on the same curve, we could first compute the matrix of psi(omega) and then compute heights"""

M = psi_omega_for_infinities_mixed_basis(C, prec)
height_infinities_withM(C, M, P, NP, prec)
height_infinities_withM(C, M, Q, NQ, prec)
height_infinities_withM(C, M, R, NR, prec)

Results:
0
2*11 + 5*11^2 + 9*11^3 + 9*11^4 + 9*11^5 + 11^6 + 6*11^7 + 10*11^8 + 10*11^9 + O(11^10)
7*11 + 8*11^2 + 7*11^3 + 10*11^4 + 10*11^5 + 10*11^6 + 11^7 + 3*11^9 + O(11^10)

"""Results agree!"""

"""If a leading coefficient of f is a square in Qp, then using a linear change of variables, we can find a monic model and compute the local height using the monic model"""

p = 11
prec = 10
K = pAdicField(p, prec)
x = polygen(K)
f = 3*x^6 + 1
C = HyperellipticCurve(f)
P = C(-1,2)
NP = C(-1,-2)
g = C.genus()
height_infinities_nonmonic_changeto_monic(C, P, NP, prec)

Result:
9*11 + 11^2 + 7*11^3 + 6*11^4 + 7*11^5 + 9*11^6 + 9*11^7 + 10*11^8 + 11^9 + O(11^10)


"""Now we test an example with four affine points, of higher genus (g=3), and see that the algorithm gives the answer quickly."""

p = 11
prec = 10
K = pAdicField(p, prec)
x = polygen(K)
f = (x^4+1)^2+x*(x-1)*(x-2)*(x-3)
C = HyperellipticCurve(f)
P = C(0,1)
Q = C(1,2)
R = C(2, 17)
S = C(3, 82)
t0 = cputime()
height_four_affine_points(C, P, Q, R, S, prec)
t1 = cputime()
t1-t0

Resutls:
6*11 + 4*11^2 + 3*11^3 + 6*11^4 + 3*11^5 + 3*11^6 + 8*11^7 + 8*11^8 + 5*11^9 + O(11^10)
7.890101999999999

"""Even after increasing the prime and the genus, the algorithm is still pretty fast"""

p = 17
prec = 10
K = pAdicField(p, prec)
x = polygen(K)
f = (x^5+1)^2+x^2*(x-1)^2*(x-2)^2*(x-3)^2
C = HyperellipticCurve(f)
P = C(0,1)
Q = C(1,2)
R = C(2, 33)
S = C(3, 244)
t0 = cputime()
height_four_affine_points(C, P, Q, R, S, prec)
t1 = cputime()
t1-t0

Resutls:
15*17 + 14*17^2 + 12*17^3 + 12*17^4 + 6*17^5 + 12*17^6 + 12*17^7 + 13*17^8 + O(17^10)
28.754357

"""Now we check in some examples that the results agree with the results using the code created by Balakrishnan-Besser"""

p = 17
prec = 10
K = pAdicField(p, prec)
x = polygen(K)
f = x^3*(x-1)^2*(x-2)^2*(x-3)*(x-4)+1
C = HyperellipticCurve(f)
P = C(0,1)    
Q = C(1,-1)
R = C(2,1)
S = C(3,-1)
T = C(4,1)
height_four_affine_points(C, P, Q, R, S, prec)
C.height([ (1, P), (-1, Q)], [ (1, R), (-1, S)])

Resutls:
13*17 + 13*17^2 + 12*17^3 + 12*17^4 + 16*17^5 + 10*17^6 + 5*17^7 + 11*17^8 + 10*17^9 + O(17^10)
13*17 + 13*17^2 + 12*17^3 + 12*17^4 + 16*17^5 + 10*17^6 + 5*17^7 + 11*17^8 + 10*17^9 + O(17^10)

"""Now we use the model indepence of the local height to verify that three different ways of computing the height agree"""

p = 11
prec = 10
K = pAdicField(p, prec)
x = polygen(K)
f1 = x^8+3*x^5+4*x^4+x
C = HyperellipticCurve(f1)
P = C(1,3)    
Q = C(-1,1)
f2 = x^7+4*x^4+3*x^3+1
X = HyperellipticCurve(f2)
R = X(0,-1)
S = X(0,1)
P2 = X(1,3)
Q2 = X(-1,1)
t0 = cputime()
height_infinities(C, P, Q, prec)
t1 = cputime()
height_four_affine_points(X, R, S, P2, Q2, prec)
t2 = cputime()
X.height([ (1, R), (-1, S)], [ (1, P2), (-1, Q2)])

Results:
5*11 + 5*11^2 + 6*11^3 + 10*11^4 + 2*11^5 + 5*11^6 + 2*11^7 + 10*11^8 + 10*11^9 + O(11^10)
5*11 + 5*11^2 + 6*11^3 + 10*11^4 + 2*11^5 + 5*11^6 + 2*11^7 + 10*11^8 + 10*11^9 + O(11^10)
5*11 + 5*11^2 + 6*11^3 + 10*11^4 + 2*11^5 + 5*11^6 + 2*11^7 + 10*11^8 + 10*11^9 + O(11^10)